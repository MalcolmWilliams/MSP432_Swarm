#include "I2Cdev.h"


/** Default constructor.
 */
I2Cdev::I2Cdev() {

    P1SEL0 |= BIT6 | BIT7;                   // I2C pins    
    
    // Configure USCI_B0 for I2C mode
    UCB0CTLW0 |= UCSWRST;                   // Software reset enabled
    UCB0CTLW0 |= UCMODE_3 | UCMST | UCSYNC; // I2C mode, Master mode, sync
    //UCB0CTLW1 |= UCASTP_2;                  // Automatic stop generated
                                            // after UCB0TBCNT is reached
    //UCB0BRW = 0x008;
    UCB0BRW = 0x07A;                       // baudrate = SMCLK / 120
    //UCB0TBCNT = 0x0005;                     // number of bytes to be received
    UCB0I2CSA = ACCEL_GYRO_I2C_ADDRESS;                     // Slave address
    UCB0CTLW0 &= ~UCSWRST;
    UCB0IE |= UCRXIE | UCNACKIE | UCBCNTIE | UCTXIE;    
}

void I2Cdev::ISR(uint16_t status)
{
    if (status & UCNACKIFG)
    {
        UCB0CTLW0 |= UCTXSTT;                  // I2C start condition 
    }
    if (UCB0IFG & UCTXIFG0)
    {
        UCB0TXBUF = (*this).txbuf;
        //SCB_SCR &= ~SCB_SCR_SLEEPONEXIT;          // Wake up on exit from ISR
    }
    if (UCB0IFG & UCRXIFG0)
    {
    	this->rxbuf = UCB0RXBUF;                   // Get RX data
    }
}

int8_t I2Cdev::readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data, uint16_t timeout) {
    uint8_t b;
    uint8_t count = readByte(devAddr, regAddr, &b, timeout);
    *data = b & (1 << bitNum);
    return count;
}

/** Read a single bit from a 16-bit device register.
 * @param devAddr I2C slave device address
 * @param regAddr Register regAddr to read from
 * @param bitNum Bit position to read (0-15)
 * @param data Container for single bit value
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBitW(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint16_t *data, uint16_t timeout) {
    uint16_t b;
    uint8_t count = readWord(devAddr, regAddr, &b, timeout);
    *data = b & (1 << bitNum);
    return count;
}

/** Read multiple bits from an 8-bit device register.
 * @param devAddr I2C slave device address
 * @param regAddr Register regAddr to read from
 * @param bitStart First bit position to read (0-7)
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
    // 01101001 read byte
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    uint8_t count, b;
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
        b &= mask;
        b >>= (bitStart - length + 1);
        *data = b;
    }
    return count;
}

/** Read multiple bits from a 16-bit device register.
 * @param devAddr I2C slave device address
 * @param regAddr Register regAddr to read from
 * @param bitStart First bit position to read (0-15)
 * @param length Number of bits to read (not more than 16)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (1 = success, 0 = failure, -1 = timeout)
 */
int8_t I2Cdev::readBitsW(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint16_t *data, uint16_t timeout) {
    // 1101011001101001 read byte
    // fedcba9876543210 bit numbers
    //    xxx           args: bitStart=12, length=3
    //    010           masked
    //           -> 010 shifted
    uint8_t count;
    uint16_t w;
    if ((count = readWord(devAddr, regAddr, &w, timeout)) != 0) {
        uint16_t mask = ((1 << length) - 1) << (bitStart - length + 1);
        w &= mask;
        w >>= (bitStart - length + 1);
        *data = w;
    }
    return count;
}

/** Read single byte from an 8-bit device register.
 * @param devAddr I2C slave device address
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
    return readBytes(devAddr, regAddr, 1, data, timeout);
}

/** Read single word from a 16-bit device register.
 * @param devAddr I2C slave device address
 * @param regAddr Register regAddr to read from
 * @param data Container for word value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readWord(uint8_t devAddr, uint8_t regAddr, uint16_t *data, uint16_t timeout) {
    return readWords(devAddr, regAddr, 1, data, timeout);
}


/** Read multiple bytes from an 8-bit device register.
 * @param devAddr I2C slave device address
 * @param regAddr First register regAddr to read from
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
	int count;

    return count;
}

/** Read multiple words from a 16-bit device register.
 * @param devAddr I2C slave device address
 * @param regAddr First register regAddr to read from
 * @param length Number of words to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of words read (0 indicates failure)
 */
int8_t I2Cdev::readWords(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint16_t *data, uint16_t timeout) {

    int count = 0;
    int k;

    UCB0I2CSA = devAddr;

    for (k = 0; k < length*2; k ++) {

        while (UCB0CTLW0 & UCTXSTP);                      // Ensure stop condition got sent
        UCB0CTLW0 |= UCTR | UCTXSTT;                      // I2C TX, start condition
        while ((UCB0IFG & UCTXIFG0)==0) {if(UCB0IFG & UCNACKIFG) break;}    //if nack, release the line
        UCB0TXBUF = regAddr;
        while ((UCB0IFG & UCTXIFG0)==0) {if(UCB0IFG & UCNACKIFG) break;}    //if nack, release the line
        UCB0CTLW0 |= UCTXSTP;

        while (UCB0CTLW0 & UCTXSTP);                      // Ensure stop condition got sent
        UCB0CTLW0 &= ~UCTR;                      // I2C RX
        UCB0CTLW0 |= UCTXSTT;                      // start condition
        while ((UCB0IFG & UCTXIFG0)==0) {if(UCB0IFG & UCNACKIFG) break;}    //if nack, release the line
        data[count] = UCB0RXBUF << 8;
        while ((UCB0IFG & UCTXIFG0)==0) {if(UCB0IFG & UCNACKIFG) break;}    //if nack, release the line
        data[count] |= UCB0RXBUF;
        UCB0CTLW0 |= UCTXSTP;                     // I2C stop condition
        count++;
        regAddr++;
    }

    return count;
}

	/** write a single bit in an 8-bit device register.
	 * @param devAddr I2C slave device address
	 * @param regAddr Register regAddr to write to
	 * @param bitNum Bit position to write (0-7)
	 * @param value New bit value to write
	 * @return Status of operation (true = success)
	 */
	bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
	    uint8_t b;
	    readByte(devAddr, regAddr, &b);
	    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
	    return writeByte(devAddr, regAddr, b);
	}

	/** write a single bit in a 16-bit device register.
	 * @param devAddr I2C slave device address
	 * @param regAddr Register regAddr to write to
	 * @param bitNum Bit position to write (0-15)
	 * @param value New bit value to write
	 * @return Status of operation (true = success)
	 */
	bool I2Cdev::writeBitW(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint16_t data) {
	    uint16_t w;
	    readWord(devAddr, regAddr, &w);
	    w = (data != 0) ? (w | (1 << bitNum)) : (w & ~(1 << bitNum));
	    return writeWord(devAddr, regAddr, w);
	}

	/** Write multiple bits in an 8-bit device register.
	 * @param devAddr I2C slave device address
	 * @param regAddr Register regAddr to write to
	 * @param bitStart First bit position to write (0-7)
	 * @param length Number of bits to write (not more than 8)
	 * @param data Right-aligned value to write
	 * @return Status of operation (true = success)
	 */
	bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
	    //      010 value to write
	    // 76543210 bit numbers
	    //    xxx   args: bitStart=4, length=3
	    // 00011100 mask byte
	    // 10101111 original value (sample)
	    // 10100011 original & ~mask
	    // 10101011 masked | value
	    uint8_t b;
	    if (readByte(devAddr, regAddr, &b) != 0) {
	        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
	        data <<= (bitStart - length + 1); // shift data into correct position
	        data &= mask; // zero all non-important bits in data
	        b &= ~(mask); // zero all important bits in existing byte
	        b |= data; // combine data with existing byte
	        return writeByte(devAddr, regAddr, b);
	    } else {
	        return false;
	    }
	}

	/** Write multiple bits in a 16-bit device register.
	 * @param devAddr I2C slave device address
	 * @param regAddr Register regAddr to write to
	 * @param bitStart First bit position to write (0-15)
	 * @param length Number of bits to write (not more than 16)
	 * @param data Right-aligned value to write
	 * @return Status of operation (true = success)
	 */
	bool I2Cdev::writeBitsW(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint16_t data) {
	    //              010 value to write
	    // fedcba9876543210 bit numbers
	    //    xxx           args: bitStart=12, length=3
	    // 0001110000000000 mask byte
	    // 1010111110010110 original value (sample)
	    // 1010001110010110 original & ~mask
	    // 1010101110010110 masked | value
	    uint16_t w;
	    if (readWord(devAddr, regAddr, &w) != 0) {
	        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
	        data <<= (bitStart - length + 1); // shift data into correct position
	        data &= mask; // zero all non-important bits in data
	        w &= ~(mask); // zero all important bits in existing word
	        w |= data; // combine data with existing word
	        return writeWord(devAddr, regAddr, w);
	    } else {
	        return false;
	    }
	}

	/** Write single byte to an 8-bit device register.
	 * @param devAddr I2C slave device address
	 * @param regAddr Register address to write to
	 * @param data New byte value to write
	 * @return Status of operation (true = success)
	 */
	bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
	    return writeBytes(devAddr, regAddr, 1, &data);
	}

	/** Write single word to a 16-bit device register.
	 * @param devAddr I2C slave device address
	 * @param regAddr Register address to write to
	 * @param data New word value to write
	 * @return Status of operation (true = success)
	 */
	bool I2Cdev::writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data) {
	    return writeWords(devAddr, regAddr, 1, &data);
	}


/** Write multiple bytes to an 8-bit device register.
 * @param devAddr I2C slave device address
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
    /*this is incompatible with the automatic stop bit*/
   // UCB0CTLW0 |= UCSWRST;                   // Software reset enabled
    UCB0CTLW1 |= UCASTP_0;                  // disable automatic stop generation
    //UCB0CTLW0 &= ~UCSWRST;                   // enabled

	while (UCB0CTLW0 & UCTXSTP);                      // Ensure stop condition got sent
    UCB0CTLW0 |= UCTR | UCTXSTT;                      // I2C TX, start condition
    while ((UCB0IFG & UCTXIFG0)==0) {if(UCB0IFG & UCNACKIFG) break;}    //if nack, release the line
    //int i;
	//for (i = 10; i > 0; i--) {__no_operation();}	//this fix is needed when the clock is set to 48mhz
    UCB0TXBUF = regAddr;

    uint8_t i;
    for (i = 0; i < length; i++) {
        while ((UCB0IFG & UCTXIFG0)==0) {if(UCB0IFG & UCNACKIFG) break;}    //if nack, release the line
        UCB0TXBUF = data[i];
    }

    while ((UCB0IFG & UCTXIFG0)==0) {if(UCB0IFG & UCNACKIFG) break;}    //if nack, release the line
    UCB0CTLW0 |= UCTXSTP;

   // UCB0CTLW0 |= UCSWRST;                   // Software reset enabled
    UCB0CTLW1 |= UCASTP_2;                  // Automatic stop generated
	//UCB0CTLW0 &= ~UCSWRST;                   // enabled

    return 1;
}

/** Write multiple words to a 16-bit device register.
 * @param devAddr I2C slave device address
 * @param regAddr First register address to write to
 * @param length Number of words to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWords(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint16_t* data) {

    while (UCB0CTLW0 & UCTXSTP);                      // Ensure stop condition got sent
    UCB0CTLW0 |= UCTR | UCTXSTT;                      // I2C TX, start condition
    while ((UCB0IFG & UCTXIFG0)==0) {if(UCB0IFG & UCNACKIFG) break;}    //if nack, release the line
    UCB0TXBUF = regAddr;

    uint8_t i;
    for (i = 0; i < length*2; i++) {
        while ((UCB0IFG & UCTXIFG0)==0) {if(UCB0IFG & UCNACKIFG) break;}    //if nack, release the line
        UCB0TXBUF = (data[i++] >> 8);	//send MSB
        while ((UCB0IFG & UCTXIFG0)==0) {if(UCB0IFG & UCNACKIFG) break;}    //if nack, release the line
        UCB0TXBUF = (data[i]);	//send LSB
    }

    while ((UCB0IFG & UCTXIFG0)==0) {if(UCB0IFG & UCNACKIFG) break;}    //if nack, release the line
    UCB0CTLW0 |= UCTXSTP;

    return 1;
}

/** Default timeout value for read operations.
 * Set this to 0 to disable timeout detection.
 */
uint16_t I2Cdev::readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;
