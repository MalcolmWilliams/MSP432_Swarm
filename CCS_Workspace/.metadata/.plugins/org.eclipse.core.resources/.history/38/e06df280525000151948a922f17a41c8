
#include "msp.h"
#include "IMU/I2Cdev.h"
//#include "IMU/MPU6050_6Axis_MotionApps20.h"
#include "IMU/MPU6050.h"
#include <stdio.h>
#include "UART/UART_A0.h"
#include <stdint.h>








//*****************************************************************************
//
// Copyright (C) 2012 - 2014 Texas Instruments Incorporated - http://www.ti.com/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
//  Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//
//  Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in the
//  documentation and/or other materials provided with the
//  distribution.
//
//  Neither the name of Texas Instruments Incorporated nor the names of
//  its contributors may be used to endorse or promote products derived
//  from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// MSP432 Family Interrupt Vector Table for CGT
//
//****************************************************************************
    //#ifdef __cplusplus
    extern "C" {
    //#endif

/* Forward declaration of the default fault handlers. */
static void resetISR(void);
static void nmiISR(void);
static void faultISR(void);
static void intDefaultHandler(void);


/* External declaration for the reset handler that is to be called when the */
/* processor is started                                                     */
extern void _c_int00(void);


/* Linker variable that marks the top of the stack. */
extern unsigned long __STACK_END;
/* External declarations for the interrupt handlers used by the application. */
extern void eUSCIB0IsrHandler(void);
/* To be added by user */





/* This is the code that gets called when the processor first starts execution */
/* following a reset event.  Only the absolutely necessary set is performed,   */
/* after which the application supplied entry() routine is called.  Any fancy  */
/* actions (such as making decisions based on the reset cause register, and    */
/* resetting the bits in that register) are left solely in the hands of the    */
/* application.                                                                */
void resetISR(void)
{
    /* Jump to the CCS C Initialization Routine. */
    __asm("    .global _c_int00\n"
          "    b.w     _c_int00");
}


/* This is the code that gets called when the processor receives a NMI.  This  */
/* simply enters an infinite loop, preserving the system state for examination */
/* by a debugger.                                                              */
static void nmiISR(void)
{
    /* Enter an infinite loop. */
    while(1)
    {
    }
}


/* This is the code that gets called when the processor receives a fault        */
/* interrupt.  This simply enters an infinite loop, preserving the system state */
/* for examination by a debugger.                                               */
static void faultISR(void)
{
    /* Enter an infinite loop. */
    while(1)
    {
    }
}


/* This is the code that gets called when the processor receives an unexpected  */
/* interrupt.  This simply enters an infinite loop, preserving the system state */
/* for examination by a debugger.                                               */
static void intDefaultHandler(void)
{
    /* Enter an infinite loop. */
    while(1)
    {
    }
}

//#ifdef __cplusplus
}
//#endif










MPU6050 accelgyro;
I2Cdev i2cdev;
UART_A0 uartA0;


// I2C interrupt service routine
void eUSCIB0IsrHandler(void)
{
	P6OUT |= BIT0;
	P6OUT &= ~BIT0;
	P6OUT |= BIT0;
	P6OUT &= ~BIT0;
	P6OUT |= BIT0;
	P6OUT &= ~BIT0;

	accelgyro.ISR(UCB0IFG);

	UCB0IFG &= ~UCB0IFG;	//clear interupt flags
  P6OUT |= BIT0;
  P6OUT &= ~ BIT0;


}




char debugOutput[50];
int16_t ax, ay, az;
int16_t gx, gy, gz;

void MPU9150_setupCompass();

//void eUSCIB0IsrHandler(void);

void main(void)
{
  WDTCTL = WDTPW | WDTHOLD;           // Stop watchdog timer

  P6DIR |= BIT0;                          // P6.0 set as output
  P6OUT &= ~BIT0;

  CSKEY = 0x695A;                        // Unlock CS module for register access
  CSCTL0 = 0;                            // Reset tuning parameters
  CSCTL0 = DCORSEL_5;                    // Set DCO to 48MHz
  CSCTL1 = SELA_2 | SELS_3 | SELM_3;     // Select ACLK = REFO, SMCLK = MCLK = DCO
  CSKEY = 0;                             // Lock CS module from unintended accesses

  __enable_interrupt();
  NVIC_ISER0 = 1 << ((INT_EUSCIB0 - 16) & 31); // Enable eUSCIB0 interrupt in NVIC module

  i2cdev.writeByte(0x68, 0x6B, 0);	//wake from sleep
  MPU9150_setupCompass();

  //accelgyro.initialize();
  //accelgyro.testConnection();
  //accelgyro.setIntDataReadyEnabled(1);



  while(1)
  {
	  P6OUT |= BIT0;
    P6OUT &= ~BIT0;
    int i;
    for (i = 10000; i > 0; i--) {__no_operation();}
    //accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
    i2cdev.writeByte(0x68, 0x6B, 0);	//wake from sleep
    //accelgyro.getAccelerationX();

    int n=sprintf(debugOutput, "ax: %d\t ay: %d\t az: %d\t gx: %d\t gy: %d\t gz: %6d\t", ax, ay, az, gx, gy, gz);

    uartA0.sendString(debugOutput);
    //accelgyro.getIntStatus();


  }
	
}

void MPU9150_setupCompass(){
/*
	//UCB0CTLW0 |= UCSWRST;
    UCB0I2CSA = MAG_I2C_ADDRESS;      //change Adress to Compass
    //UCB0CTLW0 &= ~UCSWRST;

  i2cdev.writeByte(0x68, 0x0A, 0x00); //PowerDownMode
  i2cdev.writeByte(0x68, 0x0A, 0x0F); //SelfTest
  i2cdev.writeByte(0x68, 0x0A, 0x00); //PowerDownMode
*/

  //UCB0CTLW0 |= UCSWRST;
  UCB0I2CSA = ACCEL_GYRO_I2C_ADDRESS;      //change Adress to Compass
  //UCB0CTLW0 &= ~UCSWRST;


  i2cdev.writeByte(0x68, 0x24, 0x40); //Wait for Data at Slave0
  i2cdev.writeByte(0x68, 0x25, 0x8C); //Set i2c address at slave0 at 0x0C
  i2cdev.writeByte(0x68, 0x26, 0x02); //Set where reading at slave 0 starts
  i2cdev.writeByte(0x68, 0x27, 0x88); //set offset at start reading and enable
  i2cdev.writeByte(0x68, 0x28, 0x0C); //set i2c address at slv1 at 0x0C
  i2cdev.writeByte(0x68, 0x29, 0x0A); //Set where reading at slave 1 starts
  i2cdev.writeByte(0x68, 0x2A, 0x81); //Enable at set length to 1
  i2cdev.writeByte(0x68, 0x64, 0x01); //overvride register
  i2cdev.writeByte(0x68, 0x67, 0x03); //set delay rate
  i2cdev.writeByte(0x68, 0x01, 0x80);

  i2cdev.writeByte(0x68, 0x34, 0x04); //set i2c slv4 delay
  i2cdev.writeByte(0x68, 0x64, 0x00); //override register
  i2cdev.writeByte(0x68, 0x6A, 0x00); //clear usr setting
  i2cdev.writeByte(0x68, 0x64, 0x01); //override register
  i2cdev.writeByte(0x68, 0x6A, 0x20); //enable master i2c mode
  i2cdev.writeByte(0x68, 0x34, 0x13); //disable slv4
}



